---
import { nav } from '@data/links.json'
const currentPathname = Astro.url.pathname;
---
<nav class="navbar is-primary" role="navigation" aria-label="main navigation">
	<div class="navbar-brand">
		<a class="navbar-item" href="/">
			<img src="/images/logo.svg" alt="UAIS Logo" width="48" height="48">
			<span class="is-size-4 px-2 has-text-white has-text-weight-bold">UAIS</span>
		</a>
		<button class="navbar-burger burger" aria-label="menu" aria-expanded="false" data-target="navbarMenu">
			<span aria-hidden="true"></span>
			<span aria-hidden="true"></span>
			<span aria-hidden="true"></span>
		</button>
	</div>

	<div id="navbarMenu" class="navbar-menu">
		<div class="navbar-end">
			<!-- We are using a simple structure that Bulma can style -->
			{nav.map(item => {
				// --- Case 1: The item is a DROPDOWN ---
				if (item.submenu) {
					// A dropdown is active if one of its children is the current page
					const isDropdownActive = item.submenu.some(sublink => sublink.link === currentPathname);
					return (
						<div class:list={["navbar-item", "has-dropdown", "is-hoverable", { "is-active": isDropdownActive }]}>
							<a class="navbar-link" role="button" aria-haspopup="true" aria-expanded="false">
								{item.icon && <span class="icon"><i class={item.icon}></i></span>}
								<span>{item.text}</span>
							</a>
							<div class="navbar-dropdown is-boxed">
								{item.submenu.map(sublink => {
									const isLinkActive = currentPathname === sublink.link;
									return (
										<a href={sublink.link} target={sublink.target || null} class:list={['navbar-item', { 'is-active': isLinkActive }]} aria-current={isLinkActive ? 'page' : false}>
											{sublink.icon && <span class="icon"><i class={sublink.icon}></i></span>}
											<span>{sublink.text}</span>
										</a>
									);
								})}
							</div>
						</div>
					);
				}
				// --- Case 2: The item is a REGULAR LINK ---
				else {
					const isLinkActive = currentPathname === item.link || (item.link === '/' && currentPathname.endsWith('/'));
					return (
						<a href={item.link} target={item.target || null} class:list={['navbar-item', { 'is-active': isLinkActive }]} aria-current={isLinkActive ? 'page' : false}>
							{item.icon && <span class="icon"><i class={item.icon}></i></span>}
							<span>{item.text}</span>
						</a>
					);
				}
			})}
		</div>
	</div>
</nav>

<style is:global>
	/* This style ensures that the active dropdown link gets the correct text color */
	.navbar-item.has-dropdown.is-active > .navbar-link {
		color: hsl(0, 0%, 96%) !important; /* Bulma's $white-ter */
		background-color: transparent !important;
	}
</style>

<script>
document.addEventListener('DOMContentLoaded', () => {
    // --- Burger menu logic ---
    const burger = document.querySelector('.navbar-burger');
    const menu = document.querySelector('.navbar-menu');
    if (burger && menu) {
        burger.addEventListener('click', () => {
            const isActive = burger.classList.toggle('is-active');
            menu.classList.toggle('is-active');
            burger.setAttribute('aria-expanded', String(isActive));
        });
    }

    // --- Accessible Dropdown logic ---
    const dropdowns = document.querySelectorAll('.navbar-item.has-dropdown');
    dropdowns.forEach(dropdown => {
        const trigger = dropdown.querySelector('.navbar-link');
        if (trigger) {
            const toggleDropdown = (event) => {
                event.preventDefault();
                const parentDropdown = event.currentTarget.closest('.has-dropdown');
                const isActive = parentDropdown.classList.toggle('is-active');
                event.currentTarget.setAttribute('aria-expanded', String(isActive));
            }
            // Toggle on click for all devices
            trigger.addEventListener('click', toggleDropdown);
            // Toggle with keyboard
            trigger.addEventListener('keydown', (event) => {
                if(event.key === 'Enter' || event.key === ' ') {
                    toggleDropdown(event);
                }
            });
        }
    });
});
</script>